"use client";

import { Cross1Icon } from "@radix-ui/react-icons";
import { Slot } from "@radix-ui/react-slot";
import {
  ComponentPropsWithoutRef,
  createContext,
  ElementRef,
  forwardRef,
  HTMLAttributes,
  ReactElement,
  ReactNode,
  SVGAttributes,
  useCallback,
  useContext,
} from "react";
import {
  Button as ButtonPrimitive,
  Heading as HeadingPrimitive,
  Text as TextPrimitive,
  useLocale,
} from "react-aria-components";
import { toast as sonner, Toaster as ToasterPrimitive, ToastT } from "sonner";
import { IconButton, IconButtonIcon } from "@/components/icon-button";
import { cx } from "@/helpers/cx";

let uniqueId = 0;

export const ToastStateContext = createContext<{ id: number | string }>({ id: 0 });

export const closeToast = (id: number | string) => sonner.dismiss(id);

export const useCloseToast = () => {
  const { id } = useContext(ToastStateContext);
  return useCallback(() => closeToast(id), [id]);
};

export const useRenderToast = () => {
  const { direction } = useLocale();

  return (
    element: ReactElement,
    options: {
      duration?: number | undefined;
      id?: number | string | undefined;
      isDismissable?: boolean | undefined;
      isImportant?: boolean | undefined;
      onAutoClose?: ((toast: ToastT) => void) | undefined;
      onDismiss?: ((toast: ToastT) => void) | undefined;
      position?:
        | "bottom-center"
        | "bottom-end"
        | "bottom-left"
        | "bottom-right"
        | "bottom-start"
        | "top-center"
        | "top-end"
        | "top-left"
        | "top-right"
        | "top-start"
        | undefined;
    } = {},
  ) => {
    const {
      /** The amount of time in milliseconds that the toast automatically remains open. */
      duration,
      /** The unique identifier of the toast. */
      id: defaultId,
      /** Whether to mark the toast as important to screen readers. */
      isImportant = false,
      /** The event handler called when the toast automatically closes. */
      onAutoClose,
      /** The event handler called when the toast is intentionally dismissed. */
      onDismiss,
      /** The position of the toast. */
      position: smartPosition = "bottom-end",
    } = options;

    let position: "bottom-center" | "bottom-left" | "bottom-right" | "top-center" | "top-left" | "top-right";

    switch (smartPosition) {
      case "bottom-end": {
        position = direction === "ltr" ? "bottom-right" : "bottom-left";
        break;
      }
      case "bottom-start": {
        position = direction === "ltr" ? "bottom-left" : "bottom-right";
        break;
      }
      case "top-end": {
        position = direction === "ltr" ? "top-right" : "top-left";
        break;
      }
      case "top-start": {
        position = direction === "ltr" ? "top-left" : "top-right";
        break;
      }
      default: {
        position = smartPosition;
        break;
      }
    }

    let id = defaultId;

    // We don’t use the default ID generated by Sonner because
    // the default ID can’t be used programmatically to dismiss toasts.
    if (id == null) {
      uniqueId += 1;
      id = uniqueId;
    }

    return sonner.custom(
      () => {
        const state = { id };
        return <ToastStateContext.Provider value={state}>{element}</ToastStateContext.Provider>;
      },
      {
        dismissible: true,
        duration,
        id,
        important: isImportant,
        onAutoClose,
        onDismiss,
        position,
        unstyled: true,
      },
    );
  };
};

export const Toaster = (properties: { className?: string | undefined; gap?: number | undefined }) => {
  const { className, gap } = properties;
  return <ToasterPrimitive className={className} gap={gap} />;
};

export const Toast = forwardRef<
  HTMLDivElement,
  HTMLAttributes<HTMLDivElement> & {
    asChild?: boolean | undefined;
    children?: ReactNode;
  }
>(({ asChild = false, className, ...properties }, reference) => {
  const Component = asChild ? Slot : "div";
  const mergedClassName = cx(
    "dark:bg-neutral-dark-2 outline-neutral-light-a-3 dark:outline-neutral-dark-a-6 flex w-[var(--width)] overflow-hidden rounded-lg bg-white p-4 font-sans shadow-lg outline outline-1 -outline-offset-1",
    className,
  );
  return <Component className={mergedClassName} ref={reference} {...properties} />;
});

Toast.displayName = "Toast";

export const ToastTitle = forwardRef<
  ElementRef<typeof HeadingPrimitive>,
  ComponentPropsWithoutRef<typeof HeadingPrimitive> & { className?: string | undefined }
>(({ className, ...properties }, reference) => {
  const mergedClassName = cx("text-neutral-12 text-sm font-medium", className);
  return <HeadingPrimitive className={mergedClassName} slot="title" {...properties} ref={reference} />;
});

ToastTitle.displayName = "ToastTitle";

export const ToastDescription = forwardRef<
  ElementRef<typeof TextPrimitive>,
  ComponentPropsWithoutRef<typeof TextPrimitive> & { className?: string | undefined }
>(({ className, ...properties }, reference) => {
  const mergedClassName = cx("text-neutral-11 mt-1 block text-sm", className);
  return <TextPrimitive className={mergedClassName} slot="description" {...properties} ref={reference} />;
});

ToastDescription.displayName = "ToastDescription";

export const ToastIcon = forwardRef<
  SVGSVGElement,
  SVGAttributes<SVGElement> & { asChild?: boolean | undefined }
>(({ asChild = false, className, ...properties }, reference) => {
  const Component = asChild ? Slot : "svg";
  const mergedClassName = cx("text-neutral-11 me-2.5 size-5 shrink-0", className);
  // @ts-expect-error the Slot component’s type definition doesn’t play nice with SVGs
  return <Component aria-hidden className={mergedClassName} ref={reference} {...properties} />;
});

ToastIcon.displayName = "ToastIcon";

export const ToastCloseButtonPrimitive = forwardRef<
  ElementRef<typeof ButtonPrimitive>,
  ComponentPropsWithoutRef<typeof ButtonPrimitive> & { asChild?: boolean | undefined }
>(({ asChild = false, ...properties }, reference) => {
  const close = useCloseToast();
  const Component = asChild ? Slot : ButtonPrimitive;
  // @ts-expect-error the Slot component’s type definition is missing
  return <Component onPress={close} {...properties} ref={reference} />;
});

ToastCloseButtonPrimitive.displayName = "ToastCloseButtonPrimitive";

export const ToastCloseIconButton = forwardRef<
  ElementRef<typeof IconButton>,
  ComponentPropsWithoutRef<typeof IconButton>
>(({ className, variant = "ghost", ...properties }, reference) => {
  const mergedClassName = cx("size-7", className);
  const close = useCloseToast();
  return (
    <IconButton
      className={mergedClassName}
      onPress={close}
      variant={variant}
      {...properties}
      ref={reference}
    />
  );
});

ToastCloseIconButton.displayName = "ToastCloseIconButton";

export const ToastCloseIconButtonIcon = forwardRef<
  ElementRef<typeof IconButtonIcon>,
  ComponentPropsWithoutRef<typeof IconButtonIcon>
>((properties, reference) => (
  <IconButtonIcon aria-hidden asChild ref={reference} {...properties}>
    <Cross1Icon />
  </IconButtonIcon>
));

ToastCloseIconButtonIcon.displayName = "ToastCloseIconButtonIcon";
